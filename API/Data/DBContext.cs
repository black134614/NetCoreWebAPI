// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using API.Models;

namespace API.Data
{
    public partial class DBContext : DbContext
    {
        public DBContext()
        {
        }

        public DBContext(DbContextOptions<DBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Cart> Cart { get; set; }
        public virtual DbSet<ColorCategory> ColorCategory { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductCategory> ProductCategory { get; set; }
        public virtual DbSet<ProductSizeCategory> ProductSizeCategory { get; set; }
        public virtual DbSet<ProductStatus> ProductStatus { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cart>(entity =>
            {
                entity.Property(e => e.CartId).HasColumnName("CartID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.ProductStatusId).HasColumnName("ProductStatusID");

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.Cart)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_Cart_User");

                entity.HasOne(d => d.ProductStatus)
                    .WithMany(p => p.Cart)
                    .HasForeignKey(d => d.ProductStatusId)
                    .HasConstraintName("FK_Cart_ProductStatus");
            });

            modelBuilder.Entity<ColorCategory>(entity =>
            {
                entity.Property(e => e.ColorCategoryId).HasColumnName("ColorCategoryID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(50);
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Decscription).HasMaxLength(200);

                entity.Property(e => e.Infomation).HasColumnType("ntext");

                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");

                entity.Property(e => e.SeoDecscription).HasMaxLength(100);

                entity.Property(e => e.Title).HasMaxLength(200);

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_Product_ProductCategory");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<ProductSizeCategory>(entity =>
            {
                entity.Property(e => e.ProductSizeCategoryId).HasColumnName("ProductSizeCategoryID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.Title).HasMaxLength(50);
            });

            modelBuilder.Entity<ProductStatus>(entity =>
            {
                entity.Property(e => e.ProductStatusId).HasColumnName("ProductStatusID");

                entity.Property(e => e.ColorCategoryId).HasColumnName("ColorCategoryID");

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.ProductId).HasColumnName("ProductID");

                entity.Property(e => e.ProductSizeCategoryId).HasColumnName("ProductSizeCategoryID");

                entity.HasOne(d => d.ColorCategory)
                    .WithMany(p => p.ProductStatus)
                    .HasForeignKey(d => d.ColorCategoryId)
                    .HasConstraintName("FK_ProductStatus_ColorCategory");

                entity.HasOne(d => d.CreateByNavigation)
                    .WithMany(p => p.ProductStatus)
                    .HasForeignKey(d => d.CreateBy)
                    .HasConstraintName("FK_ProductStatus_User");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductStatus)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_ProductStatus_Product");

                entity.HasOne(d => d.ProductSizeCategory)
                    .WithMany(p => p.ProductStatus)
                    .HasForeignKey(d => d.ProductSizeCategoryId)
                    .HasConstraintName("FK_ProductStatus_ProductSizeCategory");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.Title).HasMaxLength(50);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.CreateTime).HasColumnType("datetime");

                entity.Property(e => e.FullName).HasMaxLength(50);

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_User_Role");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}